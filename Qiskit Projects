#Bitcamp 2022 QISKIT Projects -> Dhruv Srinivasan
#These were completed in IBM Quantum Lab, compiled together here into one file




#PROJECT 1: Apply gates and take measurements on specified qubits from an array that specified what qubit to apply what gate to

import numpy as np
#Setup
from qiskit import QuantumCircuit, execute, transpile, Aer, IBMQ
from qiskit.visualization import *
import matplotlib.pyplot as plt
print("Libraries imported successfully!")
def plotAll(listName):
    x = [i[1] for i in listName]
    y = [i[0] for i in listName]
    z = 0
    numqBits = max(x) + 1
    qc = QuantumCircuit(numqBits)
    for val in listName:
        if val[0] == "H":
            qc.h(val[1])
        elif val[0] == "X":
            qc.x(val[1])
        elif val[0] == "Y":
            qc.y(val[1])
        else:
            qc.z(val[1])
    qc.measure_all()
    qsim = Aer.get_backend('qasm_simulator')
    job = execute(qc, backend = qsim, shots = 1024)
    result = job.result()
    counts = result.get_counts(qc)
    return plot_histogram(counts)

#Execution
q_list = [("H",1),("X",2),("Y",0),("Z",1)]
plotAll(q_list)




#PROJECT 2: Implement B92 Quantum Key Distribution Protocol

import numpy as np
from qiskit import QuantumCircuit, execute, Aer
from copy import deepcopy
from random import getrandbits

def generate_alice_bits(length):
    alice_bits = []
    for i in range(length):
        alice_bits.append(getrandbits(1))
    return alice_bits
N = 500 # This is the number of bits we want to generate
alice_bits = generate_alice_bits(N)
print(alice_bits)

def encode(alice_bits):
    encoded_qubits = []
    for i in alice_bits:
        if i == 0:
            qc = QuantumCircuit(1)
            qc.z(0)
        elif i == 1:
            qc = QuantumCircuit(1)
            qc.h(0)
        encoded_qubits.append(qc)
    return encoded_qubits
encoded_qubits = encode(alice_bits)
print(encoded_qubits[1])

def generate_bob_bits(length):
    bob_bits = []
    for i in range(length):
        basis = getrandbits(1)
        if basis == 1:
            bob_bits.append(1)
        elif basis == 0:
            bob_bits.append(0)
    return bob_bits
bob_bits = generate_bob_bits(N)

def measure(encoded_qubits, bob_bits):
    bob_measurements= []
    qsim = Aer.get_backend('qasm_simulator')
    for i in range(N):
        qc = deepcopy(encoded_qubits[i])
        if bob_bits[i] == 0:
            qc.z(0)
            qc.measure_all()
        elif bob_bits[i] == 1:
            qc.h(0)
            qc.measure_all()
        else:
            print("error")
        job = execute(qc, backend = qsim, shots = 1)
        results = job.result()
        counts = results.get_counts()
        measured_bit = max(counts, key = counts.get)
        bob_measurements.append(measured_bit)
    return bob_measurements
bob_measurements = measure(encoded_qubits, bob_bits)
print(bob_measurements)

def find_bob_ones(bob_bits):
    bob_one_indices = []
    for i in range(N):
        if bob_measurements[i] == "1":
            bob_one_indices.append(i)
    return bob_one_indices
bob_one_indices = find_bob_ones(bob_measurements)
len(bob_one_indices) # Checking the length of bob_one_indices

def generate_alice_key(alice_bits, bob_one_indices):
    alice_key = []
    for i in bob_one_indices:
        if alice_bits[i] == 0:
            alice_key.append(1)
        elif alice_bits[i] == 1:
            alice_key.append(0)
    return alice_key

def generate_bob_key(bob_bits, bob_one_indices):
    bob_key = []
    for i in bob_one_indices:
        bob_key.append(bob_bits[i])
    return bob_key

alice_key = generate_alice_key(alice_bits, bob_one_indices)
bob_key = generate_bob_key(bob_bits, bob_one_indices)

print(alice_key[:10])
print(bob_key[:10])
if (alice_key == bob_key):
    print("Success the keys match!")
else:
    print("The keys don't match, check your code and try again!")




#PROJECT 3: VQE For Finance

from qiskit.algorithms import VQE, QAOA, NumPyMinimumEigensolver
from qiskit.algorithms.optimizers import COBYLA, L_BFGS_B, SLSQP, SPSA
from qiskit_optimization.algorithms import MinimumEigenOptimizer
from qiskit.circuit.library import TwoLocal, EfficientSU2
from qiskit import Aer
# from qiskit.utils import 
# from qiskit_optimization.converters import QuadraticProgramToQubo
from qiskit_finance.applications.optimization import PortfolioOptimization
# from qiskit_finance import QiskitFinanceError
from qiskit_finance.data_providers import WikipediaDataProvider
from qiskit.utils import algorithm_globals, QuantumInstance
import numpy as np
import datetime
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style("whitegrid")
%matplotlib widget

def import_stock_prices(stocks):
    quandl_token = "HRXZqqxBka_9huabBgoW" 
    wiki = WikipediaDataProvider(
                        token = quandl_token,
                        tickers = stocks,
                        start = datetime.datetime(2016,1,1),
                        end = datetime.datetime(2017,1,1))
    wiki.run()
    return wiki

stocks = ["AAPL", "NFLX", "AMZN", "IBM", "GOOG"] # NASDAQ tickers
stock_prices = import_stock_prices(stocks) 

num_assets = len(stocks)
budget = 2
portfolio = PortfolioOptimization(expected_returns=stock_prices.get_period_return_mean_vector(),
                                  covariances=stock_prices.get_period_return_covariance_matrix(),
                                  risk_factor=0.2, budget=budget)
qp = portfolio.to_quadratic_program()

#VQE Solver
portfolio_problem = Knapsack(values = values, weights = weights, max_weight = max_weight)
qp = portfolio.to_quadratic_program()
num_assets = len(stocks)
budget = 2
operator, offset = QuadraticProgramToQubo().convert(qp.to_quadratic_program()).to_ising()
print("number of qubits =",operator.num_qubits)
# Use the EfficientSU2 tunable circuit, and the SPSA optimizer
tunable_circuit = EfficientSU2(num_assets = operator.num_qubits, reps = 3, entanglement = 'full',insert_barriers=True ) 
#Output
display_values(result_quantum, stocks)
plot_portfolio_against_market(result_quantum, stock_prices)




#PROJECT 4: VQE For Chemistry
# Imports!
from qiskit import Aer, IBMQ
from qiskit_nature.drivers import PySCFDriver, UnitsType, Molecule
from qiskit_nature.problems.second_quantization import ElectronicStructureProblem
from qiskit_nature.converters.second_quantization import QubitConverter
from qiskit_nature.mappers.second_quantization import JordanWignerMapper
from qiskit_nature.algorithms import GroundStateEigensolver
from qiskit_nature.algorithms import VQEUCCFactory
from qiskit.algorithms import NumPyMinimumEigensolver
from qiskit_optimization.applications import Knapsack
from qiskit_optimization.algorithms import MinimumEigenOptimizer
from qiskit_optimization.converters import QuadraticProgramToQubo
from qiskit.algorithms import VQE
from qiskit.circuit.library import TwoLocal
from qiskit.utils import QuantumInstance
import numpy as np
import matplotlib.pyplot as plt
from qiskit.circuit.library import EfficientSU2, QAOAAnsatz
from qiskit.algorithms.optimizers import SPSA, COBYLA
from qiskit.providers.aer.noise import NoiseModel
provider = IBMQ.load_account()
print("Libraries imported successfully")
%matplotlib inline

molecule = Molecule(geometry=[['H', [0., 0., 0.]],
                              ['H', [0., 0., 0.8]]],
                     charge=0, multiplicity=1)
structure_problem = PySCFDriver(molecule = molecule, unit=UnitsType.ANGSTROM)
qubit_converter = QubitConverter(JordanWignerMapper())

method = NumPyMinimumEigensolver()
calc = GroundStateEigensolver(qubit_converter, method)
result = calc.solve(ElectronicStructureProblem(structure_problem))
print("Total energy = ", result.total_energies)

backend_belem = provider.get_backend('ibmq_belem')   # Specifying which backend to use
noise_model_belem = NoiseModel.from_backend(backend_belem)  # Creating a noise model from this backend.

#VQE Setup
qinstance = QuantumInstance(backend=Aer.get_backend('qasm_simulator'), noise_model = noise_model_belem)
tunable_circuit = EfficientSU2(reps= 1, entanglement='full') # This is the tunable circuit - this is the quantum part of VQE
optimizer = COBYLA(maxiter=500) # Classical optimizer - this is the classical part of VQE
method = VQE(ansatz = tunable_circuit, optimizer = optimizer, quantum_instance = qinstance)# Putting everything together using Qiskit's VQE function

#VQE Solve
calc = GroundStateEigensolver(qubit_converter, method)
result = calc.solve(ElectronicStructureProblem(structure_problem))
print("Total energy = ", result.total_energies)
print("Error = ", (-1.13728568 - result.total_energies)/(-1.13728568)*100) 

tunable_circuit.decompose().draw()

#Solving for array of bond angles using classical solver
distances = [0.1,0.3,0.5,0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5]
resultList2 = []
for i in distances:
    molecule = Molecule(geometry=[['H', [0., 0., 0.]],
                              ['H', [0., 0., i]]],
                     charge=0, multiplicity=1) 
    structure_problem = PySCFDriver(molecule = molecule, unit=UnitsType.ANGSTROM)
    method = NumPyMinimumEigensolver()
    calc = GroundStateEigensolver(qubit_converter, method)
    result = calc.solve(ElectronicStructureProblem(structure_problem))
    resultList2.append(float(result.total_energies)
plt.plot(distances, resultList2)

#Solving for array of bond angles using VQE Solver
distances = [0.1,0.3,0.5,0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5]
resultList2 = []
for i in distances:
    molecule = Molecule(geometry=[['H', [0., 0., 0.]],
                              ['H', [0., 0., i]]],
                     charge=0, multiplicity=1) 
    structure_problem = PySCFDriver(molecule = molecule, unit=UnitsType.ANGSTROM)
    qubit_converter = QubitConverter(JordanWignerMapper())
    qinstance = QuantumInstance(backend=Aer.get_backend('qasm_simulator'))
    tunable_circuit = EfficientSU2(reps= 1, entanglement='full') # This is the tunable circuit - this is the quantum part of VQE
    optimizer = COBYLA(maxiter=500) # Classical optimizer - this is the classical part of VQE
    calc = GroundStateEigensolver(qubit_converter, method)
    method = VQE(ansatz = tunable_circuit, optimizer = optimizer, quantum_instance = qinstance)# Putting everything together using Qiskit's VQE function
    result = calc.solve(ElectronicStructureProblem(structure_problem))
    resultList1.append(float(result.total_energies))
    print("iterating") #IBM server was timing out, making sure that program was in fact iterating and not paused due to internet connectivity

#Plot both graphs on top of each other
fig, ax = plt.subplots()
ax.plot(distances, resultList1[0:13])
ax.plot(distances, resultList1[13:])
plt.show()











